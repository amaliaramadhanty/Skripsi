/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package skripsi;

import java.io.File;
import java.text.DecimalFormat;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import jxl.Sheet;
import jxl.Workbook;
import java.util.Random;
import java.util.Vector;
import javax.swing.SwingUtilities;

/**
 *
 * @author Amalia
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Gui
     */
    public Main() {
        initComponents();

        chooser.setFileFilter(new FileNameExtensionFilter("Worksheet File", "xls", "xlsx", "csv"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        buttonChooseFile = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        comboBoxFungsiAktivasi = new javax.swing.JComboBox();
        comboBoxJumlahData = new javax.swing.JComboBox();
        textJumlahHiddenLayer = new javax.swing.JTextField();
        buttonHitung = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableData = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableNormalisasi = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableKeluaranHiddenLayer = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableOutputWeight = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tableOutput = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tableError = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tableDenormalisasi = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("PREDIKSI JUMLAH PERMINTAAN KORAN MENGGUNAKAN METODE");

        jLabel2.setText("EXTREME LEARNING MACHINE");

        buttonChooseFile.setText("Choose File");
        buttonChooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChooseFileActionPerformed(evt);
            }
        });

        jLabel3.setText("Jumlah Hidden Layer");

        jLabel4.setText("Fungsi Aktivasi");

        jLabel5.setText("Perbandingan Jumlah Data");

        comboBoxFungsiAktivasi.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sigmoid", "Sin" }));
        comboBoxFungsiAktivasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxFungsiAktivasiActionPerformed(evt);
            }
        });

        comboBoxJumlahData.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "80%:20%", "70%:30%", "60%:40%", "50%:50%", "40%:60%" }));
        comboBoxJumlahData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxJumlahDataActionPerformed(evt);
            }
        });

        textJumlahHiddenLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textJumlahHiddenLayerActionPerformed(evt);
            }
        });

        buttonHitung.setText("Hitung");
        buttonHitung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHitungActionPerformed(evt);
            }
        });

        tableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableData);

        jLabel9.setText("1-7");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3))
                                .addGap(43, 43, 43)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(comboBoxFungsiAktivasi, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textJumlahHiddenLayer, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(buttonHitung))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboBoxJumlahData, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(261, 261, 261))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonChooseFile)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonChooseFile)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textJumlahHiddenLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(comboBoxFungsiAktivasi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxJumlahData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(buttonHitung))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Import", jPanel1);

        tableNormalisasi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tableNormalisasi);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Normalisasi", jPanel2);

        tableKeluaranHiddenLayer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tableKeluaranHiddenLayer);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Keluaran Hidden Layer Dengan Fungsi Aktivasi", jPanel7);

        tableOutputWeight.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Output Weight"
            }
        ));
        jScrollPane5.setViewportView(tableOutputWeight);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(540, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Output Weight", jPanel8);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Training", jPanel3);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane3.addTab("Keluaran Hidden Layer Dengan Fungsi Aktivasi", jPanel9);

        tableOutput.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data ke-", "Output"
            }
        ));
        jScrollPane6.setViewportView(tableOutput);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(288, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane3.addTab("Output", jPanel10);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTabbedPane3))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane3)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Testing", jPanel4);

        tableError.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data ke-", "Nilai Error"
            }
        ));
        jScrollPane7.setViewportView(tableError);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(98, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Evaluasi", jPanel6);

        tableDenormalisasi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Output ke-", "Hasil"
            }
        ));
        jScrollPane8.setViewportView(tableDenormalisasi);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(313, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(98, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Denormalisasi", jPanel5);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane9.setViewportView(jTable1);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane10.setViewportView(jTable3);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(325, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Log", jPanel11);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(233, 233, 233)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(311, 311, 311)
                                .addComponent(jLabel2)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(23, 23, 23)
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    JFileChooser chooser = new JFileChooser("");
    private String fileInput;
    DefaultTableModel data, normalisasi, keluaranHiddenLayer, testing, outputW, outputLayer, nilaiError,
            denormalisasi, inputW, biasT;
    double[][] isiData;
    double[] target;
    int jumlahInputLayer;

    static int jumlahHiddenLayer;
    int jumlahData;
    double[][] inputWeight;
    double[] bias;
    double[][] outputHidden;
    double[][] outputWeight;

    Object fungsiAktivasi;
    Object perbandinganData;

    int jumlahTraining;
    int jumlahTesting;
    double[][] dataTraining;
    double[][] dataTesting;
    double[][] targetTraining;
    double[] targetTesting;
    double[][] output;
    double[] error;
    double nilaiMse;

    double max = 0;
    double min = 10000;

    Random random = new Random();
    DecimalFormat df = new DecimalFormat("#.######");

    void setParameter() {
        jumlahHiddenLayer = Integer.valueOf(textJumlahHiddenLayer.getText());

        inputWeight = new double[jumlahHiddenLayer][jumlahInputLayer];
        bias = new double[jumlahHiddenLayer];
        outputWeight = new double[jumlahHiddenLayer][0];
        if (perbandinganData == "80%:20%") {
            jumlahTraining = (int) Math.round((double) 80 / 100 * jumlahData);
            jumlahTesting = jumlahData - jumlahTraining;
        } else if (perbandinganData == "70%:30%") {
            jumlahTraining = (int) Math.round((double) 70 / 100 * jumlahData);
            jumlahTesting = jumlahData - jumlahTraining;
        } else if (perbandinganData == "60%:40%") {
            jumlahTraining = (int) Math.round((double) 60 / 100 * jumlahData);
            jumlahTesting = jumlahData - jumlahTraining;
        } else if (perbandinganData == "50%:50%") {
            jumlahTraining = (int) Math.round((double) 50 / 100 * jumlahData);
            jumlahTesting = jumlahData - jumlahTraining;
        } else {
            jumlahTraining = (int) Math.round((double) 40 / 100 * jumlahData);
            jumlahTesting = jumlahData - jumlahTraining;
        }
    }

    public void setInputFile(String fileInputX) {
        fileInput = fileInputX;
    }

    private void tampilData() {
        File excelFile = new File(fileInput);

        // buat model untuk file excel
        if (excelFile.exists()) {
            try {
                Workbook workbook = Workbook.getWorkbook(excelFile);
                Sheet sheet = workbook.getSheets()[0];
                jumlahData = sheet.getRows();
                jumlahInputLayer = sheet.getColumns() - 1;
                //System.out.println(jumlahInputLayer);
                isiData = new double[jumlahData][jumlahInputLayer];
                target = new double[sheet.getRows()];

//                TableModel model = new DefaultTableModel(sheet.getRows(), sheet.getColumns());
                for (int row = 0; row < sheet.getRows(); row++) {
                    for (int column = 0; column < sheet.getColumns(); column++) {
                        String content = sheet.getCell(column, row).getContents();
                        if (column != (sheet.getColumns() - 1)) {
                            isiData[row][column] = Double.parseDouble(content);
                        } else {
                            target[row] = Double.parseDouble(content);
                        }
                        //data.setValueAt(content, row, column);
                        //data.addRow(isiData);
                    }

                }

                //jTable2.setModel(data);
            } catch (Exception e) {
                //JOptionPane.showMessageDialog(null, "Error: " + e);
            }

        } else {
            JOptionPane.showMessageDialog(null, "File does not exist");
        }
    }

    void isiTabel(DefaultTableModel namaTabel) {
        namaTabel.addColumn("Data ke-");
        for (int l = 1; l < jumlahInputLayer + 1; l++) {
            namaTabel.addColumn("X" + l);
        }
        namaTabel.addColumn("T");
        for (int m = 0; m < jumlahData; m++) {
            Vector row = new Vector();
            row.addElement(new Integer(m + 1));
            for (int n = 0; n < jumlahInputLayer; n++) {
                row.addElement(new Double(isiData[m][n]));
            }
            row.addElement(target[m]);
            namaTabel.addRow(row);
        }
    }

    void normalisasi() {
        for (int i = 0; i < jumlahData; i++) {
            for (int j = 0; j < jumlahInputLayer; j++) {
                if (isiData[i][j] > max) {
                    max = isiData[i][j];
                }
                if (isiData[i][j] < min) {
                    min = isiData[i][j];
                }
            }
        }
        for (int i = 0; i < jumlahData; i++) {
            for (int j = 0; j < jumlahInputLayer; j++) {
                isiData[i][j] = (isiData[i][j] - min) / (max - min);
            }
            target[i] = (target[i] - min) / (max - min);
        }
    }

    void pembagianData() {
        dataTraining = new double[jumlahTraining][jumlahInputLayer];
        dataTesting = new double[jumlahTesting][jumlahInputLayer];
        targetTraining = new double[jumlahTraining][1];
        targetTesting = new double[jumlahTesting];
        int k = 0, l = 0;
        for (int i = 0; i < jumlahData; i++) {
            for (int j = 0; j < jumlahInputLayer; j++) {
                if (i >= jumlahTraining) {
                    dataTesting[k][j] = isiData[i][j];
                } else {
                    dataTraining[l][j] = isiData[i][j];
                }
            }
            if (i >= jumlahTraining) {
                targetTesting[k] = target[i];
            } else {
                targetTraining[l][0] = target[i];
            }
            if (i >= jumlahTraining) {
                k++;
            } else {
                l++;
            }
        }
    }

    void inisialisasi() {
        for (int i = 0; i < jumlahHiddenLayer; i++) {
            for (int j = 0; j < jumlahInputLayer; j++) {
                double w = -1 + random.nextDouble() * (1 - (-1));
                inputWeight[i][j] = Double.valueOf(df.format(w));
            }
            double b = -1 + random.nextDouble() * (1 - (-1));
            bias[i] = Double.valueOf(df.format(b));
        }
    }

    void keluaranHiddenLayer(int jmlhdata, double[][] data) {
        outputHidden = new double[jmlhdata][jumlahHiddenLayer];
        for (int i = 0; i < jmlhdata; i++) {
            for (int j = 0; j < jumlahHiddenLayer; j++) {
                outputHidden[i][j] = 0;
                for (int k = 0; k < jumlahInputLayer; k++) {
                    outputHidden[i][j] = outputHidden[i][j] + (inputWeight[j][k] * data[i][k]);
                }
                outputHidden[i][j] = outputHidden[i][j] + (bias[j]);
                if (fungsiAktivasi == "Sigmoid") {
                    outputHidden[i][j] = 1 / (1 + Math.exp(-outputHidden[i][j]));
                } else {
                    outputHidden[i][j] = Math.sin(outputHidden[i][j]);
                }
            }
        }
    }

    void outputWeight() {
        double[][] transpose = new double[jumlahHiddenLayer][jumlahTraining];
        for (int i = 0; i < jumlahTraining; i++) {
            for (int j = 0; j < jumlahHiddenLayer; j++) {
                transpose[j][i] = outputHidden[i][j];
            }
        }
//        for(int i=0; i<jumlahHiddenLayer; i++){
//            for(int j=0; j<jumlahTraining; j++){
//                System.out.print(transpose[i][j]);
//            }
//            System.out.println("");
//        }

        double[][] transposeKaliHidden = perkalianMatrik(transpose, outputHidden);
//        for (int i = 0; i < transpose.length; i++) {
//            for (int j = 0; j < transposeKaliHidden[0].length; j++) {
//                System.out.print("  " + transposeKaliHidden[i][j]);
//            }
//            System.out.println();
//        }
//        System.out.println("");

        double[][] invers = new double[transpose.length][transposeKaliHidden[0].length];
        for (int k = 0; k < transpose.length; k++) {
            for (int l = 0; l < transposeKaliHidden[0].length; l++) {
                if (k == l) {
                    invers[k][l] = 1;
                } else {
                    invers[k][l] = 0;
                }
//                System.out.print("  "+invers[k][l]);
            }
//            System.out.println("");
        }
//        System.out.println("");
        for (int k = 0; k < transpose.length; k++) {
            double t = transposeKaliHidden[k][k];
            for (int n = 0; n < transposeKaliHidden[0].length; n++) {
                invers[k][n] = invers[k][n] / t;
                transposeKaliHidden[k][n] = transposeKaliHidden[k][n] / t;
            }
            for (int l = 0; l < transposeKaliHidden[0].length; l++) {
                double c = transposeKaliHidden[l][k];
                for (int m = 0; m < transposeKaliHidden[0].length; m++) {
                    if (k != l) {
                        invers[l][m] = invers[l][m] - c * invers[k][m];
                        transposeKaliHidden[l][m] = transposeKaliHidden[l][m] - c * transposeKaliHidden[k][m];
                    }
                }
            }
        }
//        for (int i = 0; i < transpose.length; i++) {
//            for (int j = 0; j < transposeKaliHidden[0].length; j++) {
//                System.out.print("  " + transposeKaliHidden[i][j]);
//            }
//            System.out.println();
//        }
//        System.out.println("");
//        for (int i = 0; i < transpose.length; i++) {
//            for (int j = 0; j < transposeKaliHidden[0].length; j++) {
//                System.out.print("  " + invers[i][j]);
//            }
//            System.out.println();
//        }
//        System.out.println("");
        double[][] hPlus = perkalianMatrik(invers, transpose);
//        for (int i = 0; i < invers.length; i++) {
//            for (int j = 0; j < hPlus[0].length; j++) {
//                System.out.print("  " + hPlus[i][j]);
//            }
//            System.out.println();
//        }
//        System.out.println("");
//        for(int i=0; i<jumlahTraining; i++){
//            System.out.println(targetTraining[i][0]);
//        }
//        System.out.println("");
        outputWeight = perkalianMatrik(hPlus, targetTraining);
        for (int i = 0; i < hPlus.length; i++) {
            for (int j = 0; j < outputWeight[0].length; j++) {
                outputW.addRow(new Object[]{outputWeight[i][j]});
            }
//            System.out.println();
        }
    }

    double[][] perkalianMatrik(double[][] matrikA, double[][] matrikB) {
        double hasil[][] = new double[matrikA.length][matrikB[0].length];
        for (int i = 0; i < hasil.length; i++) {
            for (int j = 0; j < hasil[0].length; j++) {
                for (int k = 0; k < matrikA[0].length; k++) {
                    hasil[i][j] += matrikA[i][k] * matrikB[k][j];
                }
            }
        }
        return hasil;
    }

    void outputLayer() {
        output = perkalianMatrik(outputHidden, outputWeight);
        for (int i = 0; i < jumlahTesting; i++) {
            outputLayer.addRow(new Object[]{i + 1, output[i][0]});
        }
    }

    void nilaiError() {
        error = new double[jumlahTesting];
        for (int t = 0; t < jumlahTesting; t++) {
            error[t] = output[t][0] - targetTesting[t];
            nilaiError.addRow(new Object[]{t + 1, error[t]});
        }
    }

    void mse() {
        nilaiMse = 0;
        for (int i = 0; i < jumlahTesting; i++) {
            nilaiMse = nilaiMse + Math.pow((output[i][0] - targetTesting[i]), 2);
        }
        nilaiMse = nilaiMse / jumlahTesting;
    }

    void denormalisasi() {
        for (int i = 0; i < jumlahTesting; i++) {
            output[i][0] = output[i][0] * (max - min) + min;
//            targetTesting[i] = targetTesting[i] * (max - min) + min;
            denormalisasi.addRow(new Object[]{i + 1, Math.round(output[i][0])});
        }
    }

    private void buttonChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChooseFileActionPerformed
        // TODO add your handling code here:
        int result = chooser.showOpenDialog(this);
//        data.setRowCount(400);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            jLabel6.setText(file.getPath());
            setInputFile(file.getPath());
        }
    }//GEN-LAST:event_buttonChooseFileActionPerformed

    private void comboBoxFungsiAktivasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxFungsiAktivasiActionPerformed
        // TODO add your handling code here:
        fungsiAktivasi = comboBoxFungsiAktivasi.getSelectedItem();
    }//GEN-LAST:event_comboBoxFungsiAktivasiActionPerformed

    private void comboBoxJumlahDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxJumlahDataActionPerformed
        // TODO add your handling code here:
        perbandinganData = comboBoxJumlahData.getSelectedItem();
    }//GEN-LAST:event_comboBoxJumlahDataActionPerformed

    private void textJumlahHiddenLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textJumlahHiddenLayerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textJumlahHiddenLayerActionPerformed

    private void buttonHitungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonHitungActionPerformed
        // TODO add your handling code here:
        if (Integer.parseInt(textJumlahHiddenLayer.getText()) > 7
                || Integer.parseInt(textJumlahHiddenLayer.getText()) < 1) {
            JOptionPane.showMessageDialog(null, "Harus angka antara 1 hingga 7");
        } else {
            data = (DefaultTableModel) tableData.getModel();
            normalisasi = (DefaultTableModel) tableNormalisasi.getModel();
            keluaranHiddenLayer = (DefaultTableModel) tableKeluaranHiddenLayer.getModel();
            testing = (DefaultTableModel) jTable2.getModel();
            outputW = (DefaultTableModel) tableOutputWeight.getModel();
            outputLayer = (DefaultTableModel) tableOutput.getModel();
            nilaiError = (DefaultTableModel) tableError.getModel();
            denormalisasi = (DefaultTableModel) tableDenormalisasi.getModel();
            inputW = (DefaultTableModel) jTable1.getModel();
            biasT = (DefaultTableModel) jTable3.getModel();

            tampilData();
            isiTabel(data);

            setParameter();

            normalisasi();
            isiTabel(normalisasi);

            jLabel7.setText("Jumlah Data Training: " + jumlahTraining);
            jLabel8.setText("Jumlah Data Testing: " + jumlahTesting);

            pembagianData();

            inisialisasi();
            inputW.addColumn("InputW");
            biasT.addColumn("Bias");
            for (int l = 0; l < jumlahInputLayer; l++) {
                inputW.addColumn(l + 1);
            }
            for (int m = 0; m < jumlahHiddenLayer; m++) {
                Vector row = new Vector();
                row.addElement(new Integer(m + 1));
                for (int n = 0; n < jumlahInputLayer; n++) {
                    row.addElement(new Double(inputWeight[m][n]));
                }
                inputW.addRow(row);
                biasT.addRow(new Object[]{bias[m]});
            }

            keluaranHiddenLayer(jumlahTraining, dataTraining);
            keluaranHiddenLayer.addColumn("H");
            for (int l = 0; l < jumlahHiddenLayer; l++) {
                keluaranHiddenLayer.addColumn(l + 1);
            }
            for (int m = 0; m < jumlahTraining; m++) {
                Vector row = new Vector();
                row.addElement(new Integer(m + 1));
                for (int n = 0; n < jumlahHiddenLayer; n++) {
                    row.addElement(new Double(outputHidden[m][n]));
                }
                keluaranHiddenLayer.addRow(row);
            }

            outputWeight();

            keluaranHiddenLayer(jumlahTesting, dataTesting);
            testing.addColumn("H");
            for (int l = 0; l < jumlahHiddenLayer; l++) {
                testing.addColumn(l + 1);
            }
            for (int m = 0; m < jumlahTesting; m++) {
                Vector row = new Vector();
                row.addElement(new Integer(m + 1));
                for (int n = 0; n < jumlahHiddenLayer; n++) {
                    row.addElement(new Double(outputHidden[m][n]));
                }
                testing.addRow(row);
            }

            outputLayer();

            nilaiError();
            mse();
            jLabel10.setText("Nilai MSE: " + Double.valueOf(df.format(nilaiMse)));

            denormalisasi();
        }
    }//GEN-LAST:event_buttonHitungActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonChooseFile;
    private javax.swing.JButton buttonHitung;
    private javax.swing.JComboBox comboBoxFungsiAktivasi;
    private javax.swing.JComboBox comboBoxJumlahData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable tableData;
    private javax.swing.JTable tableDenormalisasi;
    private javax.swing.JTable tableError;
    private javax.swing.JTable tableKeluaranHiddenLayer;
    private javax.swing.JTable tableNormalisasi;
    private javax.swing.JTable tableOutput;
    private javax.swing.JTable tableOutputWeight;
    private javax.swing.JTextField textJumlahHiddenLayer;
    // End of variables declaration//GEN-END:variables
}
